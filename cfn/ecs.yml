AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Cluster for Manual App"

Parameters:
  pAppName:
    Type: String
    Description: Application Name deployed in this stack
  pEnvironmentName:
    Type: String
    Default: dev
    Description: The name of the specific stack deployment e.g. 'dev'
  pImageUri:
    Type: String
    Description: The ECR Image URI
  pVpcId:
    Type: String
    Description: VPC ID for security group
  pPrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of the private subnets in the VPC
  pELBSecurityGroupId:
    Type: String
    Description: Security Group ID of the Load Balancer
  pTargetGroupArn:
    Type: String
    Description: ARN of the Target Group
  pGitHash:
    Type: String
  pGitBranch:
    Type: String

Resources:
  IAMRoleEcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pAppName}-${pEnvironmentName}-EcsTaskRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com

  IAMRoleEcsTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${pAppName}-${pEnvironmentName}-EcsTaskExecutionRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      MaxSessionDuration: 3600
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${pAppName}-${pEnvironmentName}-EcsCluster
      CapacityProviders:
        - FARGATE
      Configuration:
        ExecuteCommandConfiguration:
          Logging: DEFAULT

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${pAppName}-${pEnvironmentName}-TaskDefinition
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt IAMRoleEcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt IAMRoleEcsTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${pAppName}-${pEnvironmentName}-container
          Image: !Sub ${pImageUri}
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: !Sub ${pEnvironmentName}
            - Name: PORT
              Value: "80"
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: !Sub /ecs/${pAppName}-${pEnvironmentName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

  ECSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS Cluster
      GroupName: !Sub ${pAppName}-${pEnvironmentName}-ecs-cluster-sg
      VpcId: !Ref pVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref pELBSecurityGroupId

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ECSClusterSecurityGroup
    Properties:
      ServiceName: !Sub ${pAppName}-${pEnvironmentName}-EcsService
      Cluster: !Ref ECSCluster
      DesiredCount: 2
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${pAppName}-${pEnvironmentName}-container
          ContainerPort: 80
          TargetGroupArn: !Sub ${pTargetGroupArn}
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSClusterSecurityGroup
          Subnets: !Ref pPrivateSubnetIds

Outputs:
  EcsTaskRoleArn:
    Description: ECS Task Role ARN
    Value: !GetAtt IAMRoleEcsTaskRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EcsTaskRoleArn"

  EcsClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-EcsClusterName"

  EcsClusterArn:
    Description: ECS Cluster ARN
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EcsClusterArn"

  EcsTaskExecutionRoleArn:
    Description: ECS Task Execution Role ARN
    Value: !GetAtt IAMRoleEcsTaskExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EcsTaskExecutionRoleArn"

  EcsTaskDefinitionArn:
    Description: ECS Task Definition ARN
    Value: !GetAtt TaskDefinition.TaskDefinitionArn
    Export:
      Name: !Sub "${AWS::StackName}-EcsTaskDefinitionArn"

  ECSClusterSecurityGroupId:
    Description: ECS Cluster Security Group ID
    Value: !GetAtt ECSClusterSecurityGroup.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-EcsClusterSecurityGroupId"

  EcsServiceName:
    Description: ECS Service Name
    Value: !GetAtt ECSService.Name
    Export:
      Name: !Sub "${AWS::StackName}-EcsServiceName"

  EcsServiceArn:
    Description: ECS Service ARN
    Value: !GetAtt ECSService.ServiceArn
    Export:
      Name: !Sub "${AWS::StackName}-EcsServiceArn"

  CodeRef:
    Value: !Join ["", [!Ref pGitBranch, ".", !Ref pGitHash]]
    Description: Code Reference
    Export:
      Name: !Sub ${AWS::StackName}-CodeRef
